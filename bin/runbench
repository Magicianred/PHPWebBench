#!/usr/bin/env php
<?php
/*
 * PHP Web Benchmark system
 *
 * The command line script
 *
 * @author    Enrico Zimuel (enrico@zimuel.it)
 * @link      http://github.com/ezimuel/PHPWebBench for the canonical source repository
 * @copyright Copyright (C) Enrico Zimuel
 * @license   BSD 3-Clause License http://opensource.org/licenses/BSD-3-Clause
 */
 chdir(dirname(__DIR__));

 // Composer autoloading
 if (!file_exists('vendor/autoload.php')) {
     echo "Unable to load PHPWebBench. Run the following commands:\n";
     echo "$ curl -s https://getcomposer.org/installer | php\n";
     echo "$ php composer.phar install\n";
     exit(2);
 }

require 'vendor/autoload.php';

// Check if running from the command line
if (php_sapi_name()!=="cli") {
    echo "PHPWebBench can be executed only from the command line";
    exit();
}

// Constants
define('VERSION', '0.1');
define('DEFAULT_NUM', 3);
define('DEFAULT_CONCURRENCY', 1);

use Zend\Console;
use PHPWebBench\Bench;
use PHPWebBench\Utility;
use PHPWebBench\Graph;
use PHPWebBench\Exception;

$supported_format = implode(",",Graph::getSupportedFormat());

$rules = array(
    'help|h'    => 'Get usage message',
    'bench|b-s' => 'Benchmark file to execute',
    'num|n-i'   => 'Number of total requests (default is 3)',
    'conc|c-i'  => 'Number of multiple requests to perform at a time (default is 1)',
    'url|u-s'   => 'URL to test (if benchmark file is not specified)',
    'graph|g-s' => 'Name of the folder contains the graphs',
    'gformat-s' => "Choose the file format of the graph ($supported_format)",
    'force|f'   => 'Force the overwrite of the ouput data',
    'http-s'    => 'Choose the HTTP version: 1.0 or 1.1 (default 1.1)'
);

printf ("PHPWebBench %s by Enrico Zimuel.\n\n", VERSION);

try {
    $opts = new Console\Getopt($rules);
    $opts->parse();
} catch (Console\Exception\RuntimeException $e) {
    echo $e->getUsageMessage();
    exit(2);
}

if ($opts->getOption('h')) {
    echo $opts->getUsageMessage();
    exit();
}

if (!isset($opts->b) && !isset($opts->u)) {
    echo "Error: you must specify a benchmark file or an URL to test\n";
    exit(2);
}

if (isset($opts->b) && !file_exists($opts->b)) {
    printf("Error: the benchmark file %s doesn't exist\n", $opts->b);
    exit(2);
}

if (isset($opts->b)) {
    $data = @include($opts->b);
    if ($data === false) {
        printf("Error: %s\n", error_get_last());
        exit(2);
    }
} else {
    $data = array(array(
            'name' => $opts->u,
            'url'  => $opts->u
    ));
}

if (isset($opts->g)) {
    if (file_exists($opts->g) && (!isset($opts->f))) {
        printf(
            "The folder %s already exists. I cannot overwrite it, use the force option (-f) if you want to.\n",
            $opts->g
        );
        exit(2);
    }
    @mkdir($opts->g);
}

$options = array();
$options['num']  = isset($opts->n) ? (int) $opts->n : DEFAULT_NUM;
$options['conc'] = isset($opts->c) ? (int) $opts->c : DEFAULT_CONCURRENCY;

$bench = new Bench($options);
$bench->setHttpAdapter('curl');
if (isset($opts->http)) {
    try {
        $bench->setHttpVersion($opts->http);
    } catch (Exception\InvalidArgumentException $e) {
        printf("Error: %s\n", $e->getMessage());
        exit(2);
    }
}

$bench->setBenchmark($data);

$start  = microtime(true);
$result = $bench->execute();
$end    = microtime(true);

printf("\nRESULTS:\n");
printf("--------\n");

printf("HTTP version         : %s\n", $bench->getHttpVersion());
printf("Number of requests   : %d\n", $options['num']);
printf("Concurrency level    : %d\n", $options['conc']);
printf("Time for tests       : %.2f sec\n", $end - $start);
printf("\n");

$dataGraph = array();

foreach ($result as $test => $value) {
    printf("Test name            : %s\n", $test);
    printf("URL                  : %s\n", $value['url']);
    foreach ($value['status'] as $status => $num) {
        printf("Status code %s      : %d\n", $status, $num);
    }
    $html_size = isset($value['html_size']) ? $value['html_size'] : 0;
    $html_size = Utility::normalizeByte($html_size);
    printf("Document size        : %s [%s] \n", $html_size['value'], $html_size['unit']);
    $tot_transfer = Utility::normalizeByte($value['total_transfer']);
    printf("Total transferred    : %s [%s] \n", $tot_transfer['value'], $tot_transfer['unit']);
    printf("Requests per second  : %.2f [#/sec]\n", $value['req_second']);
    $time_request    = Utility::normalizeSec($value['time_request'], 'msec');
    $time_request_sd = Utility::normalizeSec($value['time_request_sd'], $time_request['unit']);
    printf(
        "Time per request     : %s Â± %s [%s] (mean)\n",
        $time_request['value'], $time_request_sd['value'], $time_request['unit']
    );
    if ($options['conc'] > 1) {
        $time_req_conc = Utility::normalizeSec($value['time_request'] / $options['conc']);
        printf(
            "Time per request     : %s [%s] (mean, across all concurrent requests)\n",
            $time_req_conc['value'], $time_req_conc['unit']
        );
    }
    $transfer_rate = Utility::normalizeByte($value['transfer_rate'], 'Kb');
    printf(
        "Transfer rate        : %s [%s/sec]\n",
        $transfer_rate['value'], $transfer_rate['unit']
    );
    printf("\n");
    $dataGraph[$test] = array (
        'time_request'  => array($time_request['value'], $time_request_sd['value']),
        'req_second'    => $value['req_second'],
        'transfer_rate' => $transfer_rate['value']
    );
}

// Draw graphs
if (isset($opts->g)) {
    printf("Generating the graphs...");
    try {
        $graph = new Graph($opts->g);
        if (isset($opts->gformat)) {
            $graph->setFormat($opts->gformat);
        }
    } catch (Exception\RuntimeException $e) {
        printf("Error: %s\n", $e->getMessage());
        exit(2);
    }
    $graph->setData($dataGraph);

    $graph->setTitle("Time per request ({$options['num']} connections, {$options['conc']} clients)");
    $graph->setLabelY('msec');
    $graph->draw('time_request');

    $graph->setTitle("Requests per second ({$options['num']} connections, {$options['conc']} clients)");
    $graph->setLabelY('#/sec');
    $graph->draw('req_second');

    $graph->setTitle("Transfer rate ({$options['num']} connections, {$options['conc']} clients)");
    $graph->setLabelY('Kb/sec');
    $graph->draw('transfer_rate');

    printf("done\n");
    printf("Graphs stored in %s folder.\n", $opts->g);
}
